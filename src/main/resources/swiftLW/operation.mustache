//
// {{projectName}}Client+{{classname}}.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

{{#operations}}
extension URLRequest {

    {{#operation}}
    init?({{#hasQueryParams}}{{operationId}}QueryItems: [{{#titlecase}}{{operationId}}{{/titlecase}}QueryItem]{{/hasQueryParams}}) {
        self.init(path: "lookup", queryItems: lookupQueryItems)
    }

    {{/operation}}
}
{{/operations}}

{{#operations}}
{{#description}}/** {{description}} */
{{/description}}public extension {{projectName}}Client {

{{#operation}}
{{#allParams}}{{#isEnum}}{{^isQueryParam}}
    /**
     * enum for parameter {{paramName}}
     */
    public enum {{enumName}}_{{operationId}}: {{^isContainer}}{{{dataType}}}{{/isContainer}}{{#isContainer}}String{{/isContainer}} { {{#allowableValues}}{{#enumVars}}
        case {{name}} = {{#isContainer}}"{{/isContainer}}{{#isString}}"{{/isString}}{{{value}}}{{#isString}}"{{/isString}}{{#isContainer}}"{{/isContainer}}{{/enumVars}}{{/allowableValues}}
    }

{{/isQueryParam}}{{/isEnum}}{{/allParams}}    /**
     {{#summary}}
     {{{summary}}}
     {{/summary}}{{#allParams}}{{^isQueryParam}}
     - parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{/isQueryParam}}{{/allParams}}
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func {{operationId}}({{#allParams}}{{^isQueryParam}}{{paramName}}: {{#isEnum}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}{{{datatypeWithEnum}}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{{dataType}}}{{/isEnum}}{{^required}}? = nil{{/required}}{{#hasMore}}, {{/hasMore}}{{/isQueryParam}}{{/allParams}}{{#hasQueryParams}}queryItems: [{{#titlecase}}{{operationId}}{{/titlecase}}QueryItem]{{/hasQueryParams}}{{#hasParams}}, {{/hasParams}}{{#returnType}}success: @escaping ({{{returnType}}}) -> Void, {{/returnType}}failure: @escaping (Error) -> Void) {
        if let request = URLRequest({{#hasQueryParams}}{{operationId}}QueryItems: queryItems{{/hasQueryParams}}){{#allParams}}{{#isBodyParam}}.settingHttpBody(encodable: {{{dataType}}}){{/isBodyParam}}{{/allParams}} {
            session.jsonTask(with: request, completionHandler: completionHandler(success: success, failure: failure)).resume()
        } else {
            DispatchQueue.main.async {
                failure({{projectName}}Error(code: -1, message: "Keine Parameter erhalten."))
            }
        }
    }

{{/operation}}
}
{{/operations}}
